import { ToolBase, ToolMetadata, ToolResult } from "../core/tools/ToolBase";
import { App } from "obsidian";
import { APIManagerTool } from "./APIManagerTool";
import { AIOrchestrationTool } from "./AIOrchestrationTool";

export interface NotionAnalysisRequest {
  databaseId?: string;
  analysisType:
    | "structure"
    | "content"
    | "patterns"
    | "recommendations"
    | "full";
  focusAreas?: string[];
  outputFormat?: "summary" | "detailed" | "visual";
}

export interface NotionInsight {
  type: "structure" | "content" | "pattern" | "recommendation";
  title: string;
  description: string;
  confidence: number;
  data?: any;
  suggestions?: string[];
}

export interface NotionAnalysisResponse {
  insights: NotionInsight[];
  summary: string;
  recommendations: string[];
  metadata: {
    analyzedAt: string;
    databasesAnalyzed: number;
    totalPages: number;
    analysisDuration: number;
  };
}

export class NotionAIAssistantTool extends ToolBase {
  private app: App;
  private apiManager: APIManagerTool;
  private aiOrchestration: AIOrchestrationTool;
  private notionBaseUrl = "https://api.notion.com/v1";

  constructor(
    app: App,
    apiManager: APIManagerTool,
    aiOrchestration: AIOrchestrationTool
  ) {
    super({
      id: "notion-ai-assistant",
      name: "Notion AI Assistant",
      description: "AI assistant ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Notion ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
      category: "AI",
      icon: "ü§ñ",
      version: "1.0.0",
      author: "Ultima-Orb Team",
      tags: ["ai", "notion", "analysis", "insights", "recommendations"],
      commands: [
        {
          name: "analyze_structure",
          description: "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Notion databases",
          parameters: {
            databaseId: {
              type: "string",
              required: false,
              description:
                "ID ‡∏Ç‡∏≠‡∏á database ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)",
            },
            focusAreas: {
              type: "array",
              required: false,
              description:
                "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ô‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ['properties', 'relationships', 'content']",
            },
          },
        },
        {
          name: "generate_insights",
          description: "‡∏™‡∏£‡πâ‡∏≤‡∏á insights ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Notion",
          parameters: {
            analysisType: {
              type: "string",
              required: true,
              description:
                "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: structure, content, patterns, recommendations, full",
            },
            outputFormat: {
              type: "string",
              required: false,
              description: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: summary, detailed, visual",
            },
          },
        },
        {
          name: "optimize_database",
          description: "‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á database",
          parameters: {
            databaseId: {
              type: "string",
              required: true,
              description: "ID ‡∏Ç‡∏≠‡∏á database ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á",
            },
            optimizationType: {
              type: "string",
              required: false,
              description:
                "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: structure, performance, usability",
            },
          },
        },
        {
          name: "create_template",
          description: "‡∏™‡∏£‡πâ‡∏≤‡∏á template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö database ‡πÉ‡∏´‡∏°‡πà",
          parameters: {
            useCase: {
              type: "string",
              required: true,
              description:
                "‡∏Å‡∏£‡∏ì‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 'project_management', 'content_library', 'research'",
            },
            complexity: {
              type: "string",
              required: false,
              description: "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô: simple, medium, advanced",
            },
          },
        },
        {
          name: "sync_recommendations",
          description: "‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏±‡∏ö Obsidian",
          parameters: {
            action: {
              type: "string",
              required: true,
              description:
                "‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: create_notes, update_properties, generate_templates",
            },
            targetFolder: {
              type: "string",
              required: false,
              description: "‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô Obsidian",
            },
          },
        },
      ],
    });
    this.app = app;
    this.apiManager = apiManager;
    this.aiOrchestration = aiOrchestration;
  }

  async execute(params: {
    action: string;
    databaseId?: string;
    analysisType?: string;
    focusAreas?: string[];
    outputFormat?: string;
    optimizationType?: string;
    useCase?: string;
    complexity?: string;
    targetFolder?: string;
  }): Promise<ToolResult> {
    try {
      switch (params.action) {
        case "analyze_structure":
          return await this.analyzeStructure(
            params.databaseId,
            params.focusAreas
          );

        case "generate_insights":
          return await this.generateInsights(
            params.analysisType!,
            params.outputFormat
          );

        case "optimize_database":
          return await this.optimizeDatabase(
            params.databaseId!,
            params.optimizationType
          );

        case "create_template":
          return await this.createTemplate(params.useCase!, params.complexity);

        case "sync_recommendations":
          return await this.syncRecommendations(
            params.action,
            params.targetFolder
          );

        default:
          return {
            success: false,
            error: `Unknown action: ${params.action}`,
            message: "‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏",
            timestamp: new Date(),
          };
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : String(error),
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
        timestamp: new Date(),
      };
    }
  }

  private async analyzeStructure(
    databaseId?: string,
    focusAreas?: string[]
  ): Promise<ToolResult> {
    try {
      // ‡∏î‡∏∂‡∏á Notion API key
      const notionKeyResult = await this.apiManager.execute({
        action: "get_active_key",
        provider: "notion",
      });

      if (!notionKeyResult.success) {
        return {
          success: false,
          error: "‡πÑ‡∏°‡πà‡∏û‡∏ö Notion API key ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ",
          message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Notion API key ‡∏Å‡πà‡∏≠‡∏ô",
          timestamp: new Date(),
        };
      }

      const notionApiKey = notionKeyResult.data.key;

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• databases
      const databases = databaseId
        ? [await this.fetchDatabase(databaseId, notionApiKey)]
        : await this.fetchAllDatabases(notionApiKey);

      // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
      const analysis = await this.performStructureAnalysis(
        databases,
        focusAreas
      );

      return {
        success: true,
        data: analysis,
        message: `‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${databases.length} databases`,
        timestamp: new Date(),
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : String(error),
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á",
        timestamp: new Date(),
      };
    }
  }

  private async generateInsights(
    analysisType: string,
    outputFormat?: string
  ): Promise<ToolResult> {
    try {
      // ‡πÉ‡∏ä‡πâ AI ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á insights
      const prompt = this.buildAnalysisPrompt(analysisType, outputFormat);

      const aiResponse = await this.aiOrchestration.execute({
        // action: "generate_text",
        prompt: prompt,
        model: "llama-scout-instruct",
        maxTokens: 2000,
      });

      if (!aiResponse.success) {
        return {
          success: false,
          error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á insights ‡πÑ‡∏î‡πâ",
          message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ AI",
          timestamp: new Date(),
        };
      }

      const insights = this.parseAIInsights(aiResponse.data.content);

      return {
        success: true,
        data: {
          insights,
          summary: aiResponse.data.content,
          recommendations: this.extractRecommendations(aiResponse.data.content),
        },
        message: "‡∏™‡∏£‡πâ‡∏≤‡∏á insights ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        timestamp: new Date(),
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : String(error),
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á insights",
        timestamp: new Date(),
      };
    }
  }

  private async optimizeDatabase(
    databaseId: string,
    optimizationType?: string
  ): Promise<ToolResult> {
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• database
      const notionKeyResult = await this.apiManager.execute({
        action: "get_active_key",
        provider: "notion",
      });

      if (!notionKeyResult.success) {
        return {
          success: false,
          error: "‡πÑ‡∏°‡πà‡∏û‡∏ö Notion API key ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ",
          message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Notion API key ‡∏Å‡πà‡∏≠‡∏ô",
          timestamp: new Date(),
        };
      }

      const database = await this.fetchDatabase(
        databaseId,
        notionKeyResult.data.key
      );

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
      const recommendations = await this.generateOptimizationRecommendations(
        database,
        optimizationType
      );

      return {
        success: true,
        data: recommendations,
        message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        timestamp: new Date(),
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : String(error),
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á",
        timestamp: new Date(),
      };
    }
  }

  private async createTemplate(
    useCase: string,
    complexity?: string
  ): Promise<ToolResult> {
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á template ‡∏î‡πâ‡∏ß‡∏¢ AI
      const prompt = this.buildTemplatePrompt(useCase, complexity);

      const aiResponse = await this.aiOrchestration.execute({
        // action: "generate_text",
        prompt: prompt,
        model: "llama-scout-instruct",
        maxTokens: 1500,
      });

      if (!aiResponse.success) {
        return {
          success: false,
          error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á template ‡πÑ‡∏î‡πâ",
          message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ AI",
          timestamp: new Date(),
        };
      }

      const template = this.parseTemplate(aiResponse.data.content);

      return {
        success: true,
        data: template,
        message: `‡∏™‡∏£‡πâ‡∏≤‡∏á template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${useCase} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
        timestamp: new Date(),
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : String(error),
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á template",
        timestamp: new Date(),
      };
    }
  }

  private async syncRecommendations(
    action: string,
    targetFolder?: string
  ): Promise<ToolResult> {
    try {
      const folder = targetFolder || "Notion Recommendations";

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      await this.ensureFolderExists(folder);

      switch (action) {
        case "create_notes":
          await this.createRecommendationNotes(folder);
          break;
        case "update_properties":
          await this.updateObsidianProperties(folder);
          break;
        case "generate_templates":
          await this.generateObsidianTemplates(folder);
          break;
        default:
          return {
            success: false,
            error: `Unknown sync action: ${action}`,
            message: "‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏",
            timestamp: new Date(),
          };
      }

      return {
        success: true,
        data: { action, targetFolder: folder },
        message: `‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${action}`,
        timestamp: new Date(),
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : String(error),
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
        timestamp: new Date(),
      };
    }
  }

  // Helper methods
  private async fetchDatabase(
    databaseId: string,
    apiKey: string
  ): Promise<any> {
    const response = await fetch(
      `${this.notionBaseUrl}/databases/${databaseId}`,
      {
        headers: {
          Authorization: `Bearer ${apiKey}`,
          "Notion-Version": "2022-06-28",
        },
      }
    );

    if (!response.ok) {
      throw new Error(`Failed to fetch database: ${response.statusText}`);
    }

    return await response.json();
  }

  private async fetchAllDatabases(apiKey: string): Promise<any[]> {
    const response = await fetch(`${this.notionBaseUrl}/search`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${apiKey}`,
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        filter: {
          property: "object",
          value: "database",
        },
      }),
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch databases: ${response.statusText}`);
    }

    const data = await response.json();
    return data.results || [];
  }

  private async performStructureAnalysis(
    databases: any[],
    focusAreas?: string[]
  ): Promise<any> {
    const analysis = {
      totalDatabases: databases.length,
      propertyTypes: {},
      commonPatterns: [],
      recommendations: [],
    };

    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå properties
    databases.forEach((db) => {
      if (db.properties) {
        Object.values(db.properties).forEach((prop: any) => {
          const type = prop.type || "unknown";
          analysis.propertyTypes[type] =
            (analysis.propertyTypes[type] || 0) + 1;
        });
      }
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    // analysis.recommendations = this.generateStructureRecommendations(analysis);

    return analysis;
  }

  private buildAnalysisPrompt(
    analysisType: string,
    outputFormat?: string
  ): string {
    return `‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Notion databases ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ insights ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ${
      outputFormat || "summary"
    }:

‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: ${analysisType}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ:
1. ‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
2. ‡∏£‡∏∞‡∏ö‡∏∏ patterns ‡∏ó‡∏µ‡πà‡∏û‡∏ö
3. ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
4. ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Notion`;
  }

  private buildTemplatePrompt(useCase: string, complexity?: string): string {
    return `‡∏™‡∏£‡πâ‡∏≤‡∏á Notion database template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${useCase} ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô ${
      complexity || "medium"
    }:

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ:
1. ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ properties ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
2. ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ property
3. ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏≤
4. ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
5. ‡∏™‡∏π‡∏ï‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ template ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á`;
  }

  private parseAIInsights(content: string): NotionInsight[] {
    // ‡πÅ‡∏¢‡∏Å insights ‡∏à‡∏≤‡∏Å AI response
    const insights: NotionInsight[] = [];

    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å insights (‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ regex ‡∏´‡∏£‡∏∑‡∏≠ NLP)
    const lines = content.split("\n");
    let currentInsight: Partial<NotionInsight> = {};

    lines.forEach((line) => {
      if (line.includes("**")) {
        if (currentInsight.title) {
          insights.push(currentInsight as NotionInsight);
        }
        currentInsight = {
          title: line.replace(/\*\*/g, "").trim(),
          type: "recommendation",
          confidence: 0.8,
          description: "",
        };
      } else if (currentInsight.title && line.trim()) {
        currentInsight.description =
          (currentInsight.description || "") + line.trim() + " ";
      }
    });

    if (currentInsight.title) {
      insights.push(currentInsight as NotionInsight);
    }

    return insights;
  }

  private extractRecommendations(content: string): string[] {
    const recommendations: string[] = [];
    const lines = content.split("\n");

    lines.forEach((line) => {
      if (
        line.includes("‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥") ||
        line.includes("‡∏Ñ‡∏ß‡∏£") ||
        line.includes("‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ")
      ) {
        recommendations.push(line.trim());
      }
    });

    return recommendations;
  }

  private async generateOptimizationRecommendations(
    database: any,
    optimizationType?: string
  ): Promise<any> {
    const recommendations: {
      structure: string[];
      performance: string[];
      usability: string[];
    } = {
      structure: [],
      performance: [],
      usability: [],
    };

    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
    if (database.properties) {
      const propertyCount = Object.keys(database.properties).length;
      if (propertyCount > 20) {
        recommendations.structure.push(
          "‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô properties ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"
        );
      }
    }

    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå performance
    if (database.pages && database.pages.length > 100) {
      recommendations.performance.push(
        "‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÅ‡∏ö‡πà‡∏á database ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß"
      );
    }

    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå usability
    recommendations.usability.push(
      "‡πÄ‡∏û‡∏¥‡πà‡∏° description ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö properties ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"
    );
    recommendations.usability.push("‡πÉ‡∏ä‡πâ consistent naming convention");

    return recommendations;
  }

  private parseTemplate(content: string): any {
    // ‡πÅ‡∏¢‡∏Å template ‡∏à‡∏≤‡∏Å AI response
    const template = {
      properties: [],
      formulas: [],
      examples: [],
      description: "",
    };

    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å template (‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ regex ‡∏´‡∏£‡∏∑‡∏≠ NLP)
    const lines = content.split("\n");
    let currentSection = "";

    lines.forEach((line) => {
      if (line.includes("Properties:")) {
        currentSection = "properties";
      } else if (line.includes("Formulas:")) {
        currentSection = "formulas";
      } else if (line.includes("Examples:")) {
        currentSection = "examples";
      } else if (line.trim() && currentSection) {
        template[currentSection].push(line.trim());
      }
    });

    return template;
  }

  private async ensureFolderExists(folderPath: string): Promise<void> {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô Obsidian vault
    const folder = this.app.vault.getAbstractFileByPath(folderPath);
    if (!folder) {
      // await this.app.vault.createFolder(folderPath);
    }
  }

  private async createRecommendationNotes(folder: string): Promise<void> {
    const recommendations = [
      {
        title: "Notion Database Optimization",
        content:
          "# Notion Database Optimization\n\n## ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á\n\n### 1. ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á\n- ‡πÉ‡∏ä‡πâ properties ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°\n- ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n\n### 2. ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û\n- ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô properties ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô\n- ‡πÉ‡∏ä‡πâ formulas ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û\n\n### 3. ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n- ‡πÄ‡∏û‡∏¥‡πà‡∏° descriptions\n- ‡πÉ‡∏ä‡πâ consistent naming",
      },
      {
        title: "Notion Best Practices",
        content:
          "# Notion Best Practices\n\n## ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö Database\n\n### Properties\n- ‡πÉ‡∏ä‡πâ title property ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å\n- ‡πÉ‡∏ä‡πâ select/multi-select ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà\n- ‡πÉ‡∏ä‡πâ date ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç\n\n### Views\n- ‡∏™‡∏£‡πâ‡∏≤‡∏á views ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n- ‡πÉ‡∏ä‡πâ filters ‡πÅ‡∏•‡∏∞ sorts ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°\n\n### Formulas\n- ‡πÉ‡∏ä‡πâ formulas ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n- ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á formulas ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ",
      },
    ];

    for (const rec of recommendations) {
      const filePath = `${folder}/${rec.title}.md`;
      await this.app.vault.create(filePath, rec.content);
    }
  }

  private async updateObsidianProperties(folder: string): Promise<void> {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï properties ‡πÉ‡∏ô Obsidian files
    const files = this.app.vault.getMarkdownFiles();

    for (const file of files) {
      if (file.path.startsWith(folder)) {
        const content = await this.app.vault.read(file);
        const updatedContent = this.addNotionProperties(content);
        await this.app.vault.modify(file, updatedContent);
      }
    }
  }

  private async generateObsidianTemplates(folder: string): Promise<void> {
    const templates = [
      {
        name: "Notion Database Template",
        content: `---
notion-database-id: ""
notion-database-title: ""
notion-database-description: ""
notion-properties:
  - name: "Title"
    type: "title"
    description: "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
  - name: "Status"
    type: "select"
    options: ["Backlog", "In Progress", "Done"]
  - name: "Priority"
    type: "select"
    options: ["High", "Medium", "Low"]
  - name: "Due Date"
    type: "date"
    description: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î"
---

# {{title}}

## ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
- **Status**: {{status}}
- **Priority**: {{priority}}
- **Due Date**: {{due_date}}

## ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
{{content}}

## ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
- [Notion Database]({{notion_url}})
`,
      },
    ];

    for (const template of templates) {
      const filePath = `${folder}/${template.name}.md`;
      await this.app.vault.create(filePath, template.content);
    }
  }

  private addNotionProperties(content: string): string {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Notion properties ‡∏•‡∏á‡πÉ‡∏ô frontmatter
    if (content.includes("---")) {
      const frontmatter = `notion-database-id: ""
notion-database-title: ""
notion-last-synced: "${new Date().toISOString()}"
`;

      return content.replace("---", `---\n${frontmatter}`);
    }

    return `---
notion-database-id: ""
notion-database-title: ""
notion-last-synced: "${new Date().toISOString()}"
---

${content}`;
  }

  private generateStructureRecommendations(analysis: any): string[] {
    const recommendations: string[] = [];

    if (analysis.totalDatabases > 10) {
      recommendations.push("‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏£‡∏ß‡∏° databases ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô");
    }

    if (analysis.propertyTypes["rich_text"] > 100) {
      recommendations.push(
        "‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÉ‡∏ä‡πâ select properties ‡πÅ‡∏ó‡∏ô rich_text ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î"
      );
    }

    return recommendations;
  }

  getMetadata(): ToolMetadata {
    return {
      id: "notion-ai-assistant",
      name: "Notion AI Assistant",
      description: "AI assistant ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Notion ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
      category: "AI",
      icon: "ü§ñ",
      version: "1.0.0",
      author: "Ultima-Orb Team",
      tags: ["ai", "notion", "analysis", "insights", "recommendations"],
      commands: this.metadata.commands,
    };
  }
}
