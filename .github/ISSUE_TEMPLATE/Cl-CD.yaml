name: Ultima-Orb CI/CD Pipeline
on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'examples/**'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'examples/**'
  release:
    types: [created]

env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1

jobs:
  security-check:
    name: üîí Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --production=false
        
      - name: Run security audit
        run: npm audit --audit-level=high
        
      - name: Check for API keys in code
        run: |
          if grep -r "sk-" src/ || grep -r "api_key" src/; then
            echo "‚ùå API keys found in source code!"
            exit 1
          fi
          echo "‚úÖ No API keys found in source code"
          
      - name: Scan for sensitive files
        run: |
          find . -name "*.env*" -not -path "./node_modules/*" -not -path "./.git/*" || true
          find . -name "api-keys.json" -not -path "./node_modules/*" || true

  lint-and-type-check:
    name: üîç Code Quality
    runs-on: ubuntu-latest
    needs: security-check
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: ESLint check
        run: npm run lint
        
      - name: TypeScript type check
        run: npm run type-check
        
      - name: Check for console.log statements
        run: |
          if grep -r "console\." src/ --exclude-dir=node_modules; then
            echo "‚ö†Ô∏è Console statements found in source code"
            grep -r "console\." src/ --exclude-dir=node_modules | wc -l > console_count.txt
          else
            echo "‚úÖ No console statements found"
            echo "0" > console_count.txt
          fi
          
      - name: Upload console count artifact
        uses: actions/upload-artifact@v4
        with:
          name: console-count
          path: console_count.txt

  test:
    name: üß™ Testing
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    strategy:
      matrix:
        test-type: ['unit', 'integration']
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ${{ matrix.test-type }} tests
        run: npm test
        
      - name: Generate coverage report
        if: matrix.test-type == 'unit'
        run: npm run test:coverage
        
      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test]
    outputs:
      version: ${{ steps.package-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Get package version
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        
      - name: Build production
        run: npm run build
        
      - name: Verify build artifacts
        run: |
          if [ ! -f "main.js" ]; then
            echo "‚ùå main.js not found!"
            exit 1
          fi
          if [ ! -f "manifest.json" ]; then
            echo "‚ùå manifest.json not found!"
            exit 1
          fi
          echo "‚úÖ Build artifacts verified"
          ls -la main.js manifest.json
          
      - name: Check bundle size
        run: |
          SIZE=$(stat -f%z main.js 2>/dev/null || stat -c%s main.js)
          SIZE_MB=$((SIZE / 1024 / 1024))
          echo "Bundle size: ${SIZE} bytes (${SIZE_MB} MB)"
          if [ $SIZE -gt 10485760 ]; then # 10MB
            echo "‚ö†Ô∏è Bundle size is large: ${SIZE_MB}MB"
          fi
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: obsidian-plugin-${{ steps.package-version.outputs.version }}
          path: |
            main.js
            manifest.json
            styles.css
          retention-days: 30

  validate-plugin:
    name: üîß Plugin Validation
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: obsidian-plugin-${{ needs.build.outputs.version }}
          
      - name: Validate manifest.json
        run: |
          if ! node -e "JSON.parse(require('fs').readFileSync('manifest.json'))"; then
            echo "‚ùå manifest.json is invalid"
            exit 1
          fi
          echo "‚úÖ manifest.json is valid"
          
      - name: Check required files
        run: |
          REQUIRED_FILES=("main.js" "manifest.json")
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Required file missing: $file"
              exit 1
            fi
          done
          echo "‚úÖ All required files present"

  release:
    name: üöÄ Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [security-check, lint-and-type-check, test, build, validate-plugin]
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: obsidian-plugin-${{ needs.build.outputs.version }}
          
      - name: Create release package
        run: |
          zip -r ultima-orb-${{ needs.build.outputs.version }}.zip main.js manifest.json styles.css
          
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./ultima-orb-${{ needs.build.outputs.version }}.zip
          asset_name: ultima-orb-${{ needs.build.outputs.version }}.zip
          asset_content_type: application/zip

  notification:
    name: üì¢ Notifications
    runs-on: ubuntu-latest
    if: always()
    needs: [security-check, lint-and-type-check, test, build, validate-plugin]
    steps:
      - name: Success notification
        if: ${{ needs.build.result == 'success' }}
        run: |
          echo "‚úÖ Build successful!"
          echo "Version: ${{ needs.build.outputs.version }}"
          
      - name: Failure notification
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "‚ùå Pipeline failed!"
          echo "Please check the logs and fix the issues."