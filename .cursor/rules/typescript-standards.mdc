# TypeScript Standards

## üî• Strict TypeScript Rules

### Type Safety
- ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ `any` type - ‡πÉ‡∏ä‡πâ proper types ‡πÄ‡∏™‡∏°‡∏≠
- ‡πÉ‡∏ä‡πâ `unknown` ‡πÅ‡∏ó‡∏ô `any` ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ type
- ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ type annotations ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö function parameters ‡πÅ‡∏•‡∏∞ return types
- ‡πÉ‡∏ä‡πâ interface ‡πÅ‡∏ó‡∏ô type alias ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô object types

### Code Style
- ‡πÉ‡∏ä‡πâ single quotes ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô: `'string'` ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà `"string"`
- ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ semicolons ‡πÄ‡∏™‡∏°‡∏≠: `const x = 1;`
- ‡πÉ‡∏ä‡πâ camelCase ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö variables ‡πÅ‡∏•‡∏∞ functions
- ‡πÉ‡∏ä‡πâ PascalCase ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö classes ‡πÅ‡∏•‡∏∞ interfaces

### File Organization
- ‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå = ‡∏´‡∏ô‡∏∂‡πà‡∏á class/interface/function
- ‡πÉ‡∏ä‡πâ meaningful file names
- Export/import ‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
- ‡πÉ‡∏ä‡πâ barrel exports (index.ts) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö modules

### Error Handling
- ‡πÉ‡∏ä‡πâ try-catch blocks ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö async operations
- ‡πÉ‡∏ä‡πâ proper error types
- Log errors ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
- Return meaningful error messages

## üìÅ File Structure

### Entry Points
- [main.ts](mdc:main.ts) - Plugin entry point
- [src/UltimaOrbPlugin.ts](mdc:src/UltimaOrbPlugin.ts) - Main plugin class

### Type Definitions
- [src/types/](mdc:src/types/) - Custom type definitions
- [src/types/obsidian.d.ts](mdc:src/types/obsidian.d.ts) - Obsidian API types

### Services
- [src/services/](mdc:src/services/) - Core services
- [src/services/Logger.ts](mdc:src/services/Logger.ts) - Logging service

## üõ†Ô∏è Development Commands

### Type Checking
```bash
npm run type-check    # Check TypeScript compilation
npm run lint          # ESLint with TypeScript rules
npm run lint:fix      # Auto-fix linting issues
```

### Build Process
```bash
npm run build         # Production build with type checking
npm run dev           # Development with watch mode
```

## üö® Critical TypeScript Rules

### Never Use
```typescript
// ‚ùå Bad
const data: any = getData();
function process(input: any): any { }

// ‚úÖ Good
const data: unknown = getData();
function process(input: string): string { }
```

### Always Use
```typescript
// ‚úÖ Proper typing
interface User {
  id: string;
  name: string;
  email: string;
}

async function getUser(id: string): Promise<User> {
  try {
    const response = await fetch(`/api/users/${id}`);
    return await response.json();
  } catch (error) {
    throw new Error(`Failed to fetch user: ${error}`);
  }
}
```

### Error Handling
```typescript
// ‚úÖ Proper error handling
try {
  const result = await riskyOperation();
  return result;
} catch (error) {
  if (error instanceof Error) {
    console.error('Operation failed:', error.message);
  }
  throw new Error('Unknown error occurred');
}
```
description:
globs:
alwaysApply: false
---
