# Testing Standards and Guidelines

## Test Structure
- Use [src/tests/](mdc:src/tests/) for all test files
- Follow the existing test structure in [test/](mdc:test/)
- Use [test/setup.ts](mdc:test/setup.ts) for test configuration
- Configure tests in [vitest.config.mjs](mdc:vitest.config.mjs)

## Test Categories

### Unit Tests
- Test individual functions and methods
- Mock external dependencies
- Test edge cases and error conditions
- Aim for >80% code coverage

### Integration Tests
- Test component interactions
- Test AI provider integrations
- Test file system operations
- Test UI component integration

### E2E Tests
- Test complete user workflows
- Test plugin lifecycle (onload/onunload)
- Test settings and configuration
- Test error handling and recovery

## Test Files Organization
- [src/tests/ai/](mdc:src/tests/ai/) - AI feature tests
- [src/tests/core/](mdc:src/tests/core/) - Core functionality tests
- [src/tests/integrations/](mdc:src/tests/integrations/) - Integration tests
- [src/tests/services/](mdc:src/tests/services/) - Service tests
- [src/tests/ui/](mdc:src/tests/ui/) - UI component tests

## Testing Best Practices
- Use descriptive test names
- Follow AAA pattern (Arrange, Act, Assert)
- Mock Obsidian APIs appropriately
- Test both success and failure scenarios
- Use fixtures for test data

## Mocking Guidelines
- Mock Obsidian's App and Plugin classes
- Mock file system operations
- Mock AI provider responses
- Mock external API calls

## Performance Testing
- Test response times for AI operations
- Test memory usage under load
- Test file operation performance
- Test UI rendering performance

## Error Testing
- Test API failures and timeouts
- Test invalid input handling
- Test network connectivity issues
- Test file permission errors

## Test Configuration
- Use Vitest for test runner
- Configure test environment in [vitest.config.mjs](mdc:vitest.config.mjs)
- Set up test coverage reporting
- Configure test timeouts appropriately
description:
globs:
alwaysApply: false
---
