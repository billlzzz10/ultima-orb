# TypeScript Coding Standards

## Code Style
- Use double quotes for strings (configured in [.eslintrc.js](mdc:.eslintrc.js))
- Always use semicolons
- Use TypeScript strict mode
- Prefer `const` over `let`, avoid `var`
- Use meaningful variable and function names
- Add JSDoc comments for public APIs

## File Organization
- One class per file
- Use PascalCase for class names
- Use camelCase for variables and functions
- Use kebab-case for file names
- Group related functionality in directories

## TypeScript Best Practices
- Always define interfaces for complex objects
- Use type guards for runtime type checking
- Prefer interfaces over types for object shapes
- Use enums for constants
- Avoid `any` type - use `unknown` or proper typing

## Obsidian Plugin Development
- Import from 'obsidian' for Obsidian APIs
- Use `App`, `Plugin`, `Notice`, `Modal` from Obsidian
- Follow Obsidian's plugin lifecycle (onload, onunload)
- Use Obsidian's file system APIs for file operations
- Implement proper error handling with user feedback

## Error Handling
- Use try-catch blocks for async operations
- Show user-friendly error messages with `new Notice()`
- Log errors to console for debugging
- Validate inputs before processing

## Performance
- Avoid blocking operations in UI thread
- Use async/await for file operations
- Implement proper cleanup in onunload
- Cache frequently accessed data
description:
globs:
alwaysApply: false
---
