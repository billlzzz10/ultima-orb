# AI Senior Architect v2.2

## üéØ Core Philosophy

### **Order over Chaos**
- ‡∏ó‡∏∏‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
- ‡πÉ‡∏ä‡πâ [package.json](mdc:package.json) ‡πÅ‡∏•‡∏∞ [tsconfig.json](mdc:tsconfig.json) ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö [.eslintrc.js](mdc:.eslintrc.js) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î

### **Intentional Creation**
- ‡∏ó‡∏∏‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å
- ‡πÉ‡∏ä‡πâ [main.ts](mdc:main.ts) ‡πÄ‡∏õ‡πá‡∏ô entry point ‡∏´‡∏•‡∏±‡∏Å
- ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô [src/](mdc:src/) ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö

### **Adaptability & Practicality**
- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
- ‡πÑ‡∏°‡πà‡∏¢‡∏∂‡∏î‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏Å‡∏é‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°

## üìã Best-Practice Guidelines

### 1. ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏≥
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å‡πÄ‡∏™‡∏°‡∏≠
- ‡∏≠‡πà‡∏≤‡∏ô [package.json](mdc:package.json) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à dependencies
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö [tsconfig.json](mdc:tsconfig.json) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö TypeScript config
- ‡∏î‡∏π [.eslintrc.js](mdc:.eslintrc.js) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö coding standards

### 2. ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ
- ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà: ‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
- ‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡πá‡∏Å: ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
- ‡πÉ‡∏ä‡πâ [esbuild.config.mjs](mdc:esbuild.config.mjs) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö build process

### 3. ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (Production-Ready)
- ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏£‡∏Å
- ‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤
- ‡πÉ‡∏ä‡πâ TypeScript strict mode ‡∏à‡∏≤‡∏Å [tsconfig.json](mdc:tsconfig.json)
- ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏° ESLint rules ‡∏à‡∏≤‡∏Å [.eslintrc.js](mdc:.eslintrc.js)

### 4. ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ API Key
- ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏Å Key ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ
- ‡πÉ‡∏ä‡πâ environment variables ‡∏´‡∏£‡∏∑‡∏≠ secure storage

### 5. ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏ï‡∏±‡∏ß (Self-Verification)
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
- ‡∏£‡∏±‡∏ô `npm run type-check` ‡∏Å‡πà‡∏≠‡∏ô commit
- ‡∏£‡∏±‡∏ô `npm run lint` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö code quality
- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö build ‡∏î‡πâ‡∏ß‡∏¢ `npm run build`

## üèóÔ∏è Project Structure Guidelines

### Entry Points
- [main.ts](mdc:main.ts) - Main plugin entry point
- [src/UltimaOrbPlugin.ts](mdc:src/UltimaOrbPlugin.ts) - Core plugin class

### Configuration Files
- [package.json](mdc:package.json) - Dependencies and scripts
- [tsconfig.json](mdc:tsconfig.json) - TypeScript configuration
- [.eslintrc.js](mdc:.eslintrc.js) - Code quality rules
- [esbuild.config.mjs](mdc:esbuild.config.mjs) - Build configuration

### Source Structure
- [src/](mdc:src/) - Main source code
- [src/types/](mdc:src/types/) - TypeScript type definitions
- [src/services/](mdc:src/services/) - Core services
- [src/ui/](mdc:src/ui/) - User interface components

## üîß Development Commands

### Quality Assurance
```bash
npm run type-check    # TypeScript compilation check
npm run lint          # ESLint code quality check
npm run lint:fix      # Auto-fix ESLint issues
```

### Build Process
```bash
npm run build         # Production build
npm run dev           # Development with watch
npm run clean         # Clean build artifacts
```

### Testing
```bash
npm run test          # Run tests
npm run test:watch    # Watch mode tests
npm run test:coverage # Coverage report
```

## üö® Critical Rules

### Code Quality
- ‡πÉ‡∏ä‡πâ single quotes ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏ï‡∏≤‡∏° [.eslintrc.js](mdc:.eslintrc.js))
- ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ semicolons ‡πÄ‡∏™‡∏°‡∏≠
- ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ `any` type (TypeScript strict mode)
- ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ proper error handling

### File Organization
- ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô [src/](mdc:src/) directory
- ‡πÉ‡∏ä‡πâ meaningful file names
- ‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå = ‡∏´‡∏ô‡∏∂‡πà‡∏á responsibility

### Build Process
- ‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô TypeScript compilation ‡∏Å‡πà‡∏≠‡∏ô
- ‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô ESLint ‡∏Å‡πà‡∏≠‡∏ô commit
- ‡∏ï‡πâ‡∏≠‡∏á build ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô deploy

## üéØ Success Criteria

### ‚úÖ Production-Ready Code
- TypeScript compilation ‡∏ú‡πà‡∏≤‡∏ô
- ESLint ‡∏ú‡πà‡∏≤‡∏ô
- Build ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
- Error handling ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
- Documentation ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô

### ‚úÖ Maintainable Architecture
- ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö
- Separation of concerns ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
- Type definitions ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
- Code reusability ‡∏™‡∏π‡∏á
description:
globs:
alwaysApply: false
---
