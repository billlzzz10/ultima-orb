# Obsidian Plugin Development

## 🎯 Plugin Architecture

### Core Components
- [main.ts](mdc:main.ts) - Plugin entry point
- [src/UltimaOrbPlugin.ts](mdc:src/UltimaOrbPlugin.ts) - Main plugin class
- [manifest.json](mdc:manifest.json) - Plugin metadata
- [esbuild.config.mjs](mdc:esbuild.config.mjs) - Build configuration

### Plugin Lifecycle
```typescript
export default class UltimaOrbPlugin extends Plugin {
  async onload() {
    // Initialize plugin
    // Register commands
    // Add settings tab
  }

  async onunload() {
    // Cleanup resources
    // Remove event listeners
  }
}
```

## 🔧 Obsidian API Usage

### Plugin Settings
```typescript
class UltimaOrbSettingTab extends PluginSettingTab {
  display(): void {
    const { containerEl } = this;
    containerEl.empty();
    
    // Add settings controls
    new Setting(containerEl)
      .setName('Setting Name')
      .setDesc('Setting description')
      .addText(text => text
        .setPlaceholder('placeholder')
        .setValue('default value')
        .onChange(async (value) => {
          // Handle setting change
        }));
  }
}
```

### Commands
```typescript
this.addCommand({
  id: 'unique-command-id',
  name: 'Command Name',
  callback: () => {
    // Command logic
  },
  hotkeys: [{ modifiers: ['Mod'], key: 'Enter' }]
});
```

### UI Components
```typescript
// Create elements
const container = this.containerEl.createEl('div', {
  cls: 'my-plugin-container'
});

// Add content
container.createEl('h2', { text: 'Title' });
container.createEl('p', { text: 'Description' });
```

## 📁 File Structure

### Source Organization
```
src/
├── UltimaOrbPlugin.ts      # Main plugin class
├── types/                  # TypeScript definitions
│   └── obsidian.d.ts      # Obsidian API types
├── services/              # Core services
│   └── Logger.ts          # Logging service
├── ui/                    # User interface
│   ├── components/        # Reusable components
│   └── views/            # Main views
└── utils/                # Utility functions
```

### Configuration Files
- [package.json](mdc:package.json) - Dependencies and scripts
- [tsconfig.json](mdc:tsconfig.json) - TypeScript configuration
- [.eslintrc.js](mdc:.eslintrc.js) - Code quality rules
- [manifest.json](mdc:manifest.json) - Plugin metadata

## 🚨 Best Practices

### Plugin Development
- ใช้ [src/types/obsidian.d.ts](mdc:src/types/obsidian.d.ts) สำหรับ Obsidian API types
- ตรวจสอบ plugin compatibility ใน [manifest.json](mdc:manifest.json)
- ใช้ proper error handling สำหรับ async operations
- Clean up resources ใน `onunload()`

### UI Development
- ใช้ Obsidian's built-in UI components
- Follow Obsidian's design patterns
- ใช้ CSS classes สำหรับ styling
- Test UI ใน different themes

### Data Management
- ใช้ `this.app.saveData()` และ `this.app.loadData()` สำหรับ settings
- ใช้ proper data validation
- Handle data migration gracefully
- Backup important data

### Performance
- Lazy load components เมื่อจำเป็น
- ใช้ debouncing สำหรับ frequent operations
- Minimize DOM manipulations
- Clean up event listeners

## 🔧 Development Workflow

### Build Process
```bash
npm run dev           # Development with hot reload
npm run build         # Production build
npm run type-check    # TypeScript validation
npm run lint          # Code quality check
```

### Testing
```bash
npm run test          # Run tests
npm run test:watch    # Watch mode
npm run test:coverage # Coverage report
```

### Debugging
- ใช้ `console.log()` สำหรับ debugging
- ตรวจสอบ browser console
- ใช้ Obsidian's developer tools
- Test ใน different environments

## 📋 Checklist

### Before Release
- [ ] TypeScript compilation passes
- [ ] ESLint passes
- [ ] All tests pass
- [ ] UI works in different themes
- [ ] Settings save/load correctly
- [ ] Commands work as expected
- [ ] Error handling is robust
- [ ] Documentation is complete
- [ ] Performance is acceptable
- [ ] Security considerations addressed
description:
globs:
alwaysApply: false
---
